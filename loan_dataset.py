{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":169310,"sourceType":"datasetVersion","datasetId":74581}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# Import Libraries \n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.768640Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.769076Z\",\"iopub.status.idle\":\"2025-06-09T07:20:57.776829Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.769053Z\",\"shell.execute_reply\":\"2025-06-09T07:20:57.775589Z\"}}\nimport csv\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport missingno as mso\nimport seaborn as sns\nimport warnings\nimport os\nimport scipy\nimport warnings\nwarnings.filterwarnings('ignore', category=FutureWarning)\n\nfrom scipy import stats\nfrom scipy.stats import pearsonr\nfrom scipy.stats import ttest_ind\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\n# %% [markdown]\n# Import Dataset\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.778385Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.778679Z\",\"iopub.status.idle\":\"2025-06-09T07:20:57.817997Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.778656Z\",\"shell.execute_reply\":\"2025-06-09T07:20:57.816963Z\"}}\ndf = pd.read_csv('/kaggle/input/loan-data-set/loan_data_set.csv')\nprint(df)\n\n# %% [markdown]\n# Preview Data\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.819258Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.819540Z\",\"iopub.status.idle\":\"2025-06-09T07:20:57.837261Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.819510Z\",\"shell.execute_reply\":\"2025-06-09T07:20:57.836312Z\"}}\ndf.head()\n\n# %% [markdown]\n# Print Shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.838348Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.838700Z\",\"iopub.status.idle\":\"2025-06-09T07:20:57.856301Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.838667Z\",\"shell.execute_reply\":\"2025-06-09T07:20:57.855290Z\"}}\nprint(df.shape)\n\n# %% [markdown]\n# EDA\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.858665Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.859292Z\",\"iopub.status.idle\":\"2025-06-09T07:20:57.877052Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.859265Z\",\"shell.execute_reply\":\"2025-06-09T07:20:57.875834Z\"}}\ndf = df.drop('Loan_ID', axis = 1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.877748Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.878097Z\",\"iopub.status.idle\":\"2025-06-09T07:20:57.897428Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.878068Z\",\"shell.execute_reply\":\"2025-06-09T07:20:57.896452Z\"}}\n## Identify count of male, female, and empty cells\ndf.Gender.value_counts(dropna = False)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:57.898570Z\",\"iopub.execute_input\":\"2025-06-09T07:20:57.898919Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.070849Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:57.898892Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.069672Z\"}}\n##Histogram of Male vs. Female Applicants in Dataset\nsns.countplot(x=\"Gender\", data = df, palette = \"hls\")\nplt.title (\"Gender Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.071949Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.072227Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.083149Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.072206Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.082037Z\"}}\n##Calculate percentages of male vs. female loan individuals in dataset\ncountMale = len(df[df.Gender == 'Male'])\ncountFemale = len(df[df.Gender == 'Female'])\ncountNull = len(df[df.Gender.isnull()])\nprint (\"Percentage of Male Applicants: {:.2f}%\".format ((countMale/(len(df.Gender))*100)))\nprint (\"Percentage of Female Applicants: {:.2f}%\".format ((countFemale/(len(df.Gender))*100)))\nprint (\"Missing Values Percentage : {:.2f}%\".format ((countNull/(len(df.Gender))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.084114Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.084443Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.104365Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.084420Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.103326Z\"}}\ndf.Married.value_counts(dropna=False)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.107412Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.107705Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.294854Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.107679Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.293676Z\"}}\n##Histogram of Married vs. Single Applicants in Dataset\nsns.countplot(x=\"Married\", data = df, palette = \"Paired\")\nplt.title (\"Married Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.295832Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.296097Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.306419Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.296078Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.305171Z\"}}\ncountMarried = len(df[df.Married == 'Yes'])\ncountNotMarried = len(df[df.Married == 'No'])\ncountNull = len(df[df.Married.isnull()])\n\nprint(\"Percentage of married: {:.2f}%\".format((countMarried / (len(df.Married))*100)))\nprint(\"Percentage of Not married applicant: {:.2f}%\".format((countNotMarried / (len(df.Married))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Married))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.307596Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.307937Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.328477Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.307904Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.327410Z\"}}\ndf.Education.value_counts(dropna=False)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.329425Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.329689Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.501464Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.329667Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.500389Z\"}}\n\nsns.countplot(x=\"Education\", data=df, palette=\"rocket\")\nplt.title (\"Education Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.502354Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.502596Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.512058Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.502576Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.511091Z\"}}\ncountGraduate = len(df[df.Education == 'Graduate'])\ncountNotGraduate = len(df[df.Education == 'Not Graduate'])\ncountNull = len(df[df.Education.isnull()])\n\nprint(\"Percentage of graduate applicant: {:.2f}%\".format((countGraduate / (len(df.Education))*100)))\nprint(\"Percentage of Not graduate applicant: {:.2f}%\".format((countNotGraduate / (len(df.Education))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Education))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.513486Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.513837Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.539902Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.513781Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.538757Z\"}}\ndf.Self_Employed.value_counts(dropna=False)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.541229Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.541605Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.709386Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.541556Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.708350Z\"}}\nsns.countplot(x=\"Self_Employed\", data=df, palette=\"crest\")\nplt.title (\"Self_Employed Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.710521Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.710911Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.720851Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.710882Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.719855Z\"}}\ncountNo = len(df[df.Self_Employed == 'No'])\ncountYes = len(df[df.Self_Employed == 'Yes'])\ncountNull = len(df[df.Self_Employed.isnull()])\n\nprint(\"Percentage of Not self employed: {:.2f}%\".format((countNo / (len(df.Self_Employed))*100)))\nprint(\"Percentage of self employed: {:.2f}%\".format((countYes / (len(df.Self_Employed))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Self_Employed))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.722014Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.722347Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.742637Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.722319Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.741420Z\"}}\ndf.Credit_History.value_counts(dropna=False)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.743821Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.744234Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.907936Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.744205Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.906902Z\"}}\nsns.countplot(x=\"Credit_History\", data=df, palette=\"viridis\")\nplt.title (\"Credit_History Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.909203Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.909567Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.919723Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.909528Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.918917Z\"}}\ncount1 = len(df[df.Credit_History == 1])\ncount0 = len(df[df.Credit_History == 0])\ncountNull = len(df[df.Credit_History.isnull()])\n\nprint(\"Percentage of Good credit history: {:.2f}%\".format((count1 / (len(df.Credit_History))*100)))\nprint(\"Percentage of Bad credit history: {:.2f}%\".format((count0 / (len(df.Credit_History))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Credit_History))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.921110Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.921482Z\",\"iopub.status.idle\":\"2025-06-09T07:20:58.943488Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.921446Z\",\"shell.execute_reply\":\"2025-06-09T07:20:58.942480Z\"}}\ndf.Property_Area.value_counts(dropna=False)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:58.949188Z\",\"iopub.execute_input\":\"2025-06-09T07:20:58.949562Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.130004Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:58.949536Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.129065Z\"}}\nsns.countplot(x=\"Property_Area\", data=df, palette=\"cubehelix\")\nplt.title(\"Property Area Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.131060Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.131328Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.144257Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.131307Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.142543Z\"}}\ncountUrban = len(df[df.Property_Area == 'Urban'])\ncountRural = len(df[df.Property_Area == 'Rural'])\ncountSemiurban = len(df[df.Property_Area == 'Semiurban'])\ncountNull = len(df[df.Property_Area.isnull()])\n\nprint(\"Percentage of Urban: {:.2f}%\".format((countUrban / (len(df.Property_Area))*100)))\nprint(\"Percentage of Rural: {:.2f}%\".format((countRural / (len(df.Property_Area))*100)))\nprint(\"Percentage of Semiurban: {:.2f}%\".format((countSemiurban / (len(df.Property_Area))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Property_Area))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.145535Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.146011Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.171182Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.145979Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.170014Z\"}}\ndf.Loan_Status.value_counts(dropna=False)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.171936Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.172186Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.361456Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.172167Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.360356Z\"}}\nsns.countplot(x=\"Loan_Status\", data=df, palette=\"YlOrBr\")\nplt.title(\"Loan Status Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.362484Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.362754Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.373310Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.362733Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.372203Z\"}}\ncountY = len(df[df.Loan_Status == 'Y'])\ncountN = len(df[df.Loan_Status == 'N'])\ncountNull = len(df[df.Loan_Status.isnull()])\n\nprint(\"Percentage of Approved: {:.2f}%\".format((countY / (len(df.Loan_Status))*100)))\nprint(\"Percentage of Rejected: {:.2f}%\".format((countN / (len(df.Loan_Status))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Loan_Status))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.374376Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.374713Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.398332Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.374684Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.397172Z\"}}\ndf.Loan_Amount_Term.value_counts(dropna=False)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.399432Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.400001Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.651480Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.399967Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.650253Z\"}}\nsns.countplot(x=\"Loan_Amount_Term\", data=df, palette=\"rocket\")\nplt.title(\"Loan Term (Days) Amount Histogram of Loan Data Set\")\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.652534Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.653005Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.672098Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.652972Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.671066Z\"}}\ncount12 = len(df[df.Loan_Amount_Term == 12.0])\ncount36 = len(df[df.Loan_Amount_Term == 36.0])\ncount60 = len(df[df.Loan_Amount_Term == 60.0])\ncount84 = len(df[df.Loan_Amount_Term == 84.0])\ncount120 = len(df[df.Loan_Amount_Term == 120.0])\ncount180 = len(df[df.Loan_Amount_Term == 180.0])\ncount240 = len(df[df.Loan_Amount_Term == 240.0])\ncount300 = len(df[df.Loan_Amount_Term == 300.0])\ncount360 = len(df[df.Loan_Amount_Term == 360.0])\ncount480 = len(df[df.Loan_Amount_Term == 480.0])\ncountNull = len(df[df.Loan_Amount_Term.isnull()])\n\nprint(\"Percentage of 12: {:.2f}%\".format((count12 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 36: {:.2f}%\".format((count36 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 60: {:.2f}%\".format((count60 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 84: {:.2f}%\".format((count84 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 120: {:.2f}%\".format((count120 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 180: {:.2f}%\".format((count180 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 240: {:.2f}%\".format((count240 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 300: {:.2f}%\".format((count300 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 360: {:.2f}%\".format((count360 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Percentage of 480: {:.2f}%\".format((count480 / (len(df.Loan_Amount_Term))*100)))\nprint(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Loan_Amount_Term))*100)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.673217Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.673505Z\",\"iopub.status.idle\":\"2025-06-09T07:20:59.702062Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.673481Z\",\"shell.execute_reply\":\"2025-06-09T07:20:59.701166Z\"}}\ndf[['ApplicantIncome','CoapplicantIncome','LoanAmount']].describe()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:20:59.703041Z\",\"iopub.execute_input\":\"2025-06-09T07:20:59.703293Z\",\"iopub.status.idle\":\"2025-06-09T07:21:01.254722Z\",\"shell.execute_reply.started\":\"2025-06-09T07:20:59.703271Z\",\"shell.execute_reply\":\"2025-06-09T07:21:01.253769Z\"}}\n\nsns.set(style=\"darkgrid\")\nfig, axs = plt.subplots(2, 2, figsize=(12, 16))\nsns.histplot(data=df, x=\"ApplicantIncome\", kde=True, ax=axs[0, 0], color='green').set(title = \"Histogram of Applicant Income\")\nsns.histplot(data=df, x=\"CoapplicantIncome\", kde=True, ax=axs[0, 1], color='skyblue').set(title = \"Histogram of CoApplicant Income\")\nsns.histplot(data=df, x=\"LoanAmount\", kde=True, ax=axs[1, 0], color='orange').set(title = \"Histogram of Loan Amount\");\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:01.255748Z\",\"iopub.execute_input\":\"2025-06-09T07:21:01.256112Z\",\"iopub.status.idle\":\"2025-06-09T07:21:02.304897Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:01.256086Z\",\"shell.execute_reply\":\"2025-06-09T07:21:02.303759Z\"}}\nsns.set(style=\"darkgrid\")\nfig, axs1 = plt.subplots(2, 2, figsize=(12, 12))\n\nsns.violinplot(data=df, y=\"ApplicantIncome\", ax=axs1[0, 0], color='green').set(title = \"Violin Plot of Applicant Income\")\nsns.violinplot(data=df, y=\"CoapplicantIncome\", ax=axs1[0, 1], color='skyblue').set(title = \"Violin Plot of CoApplicant Income\")\nsns.violinplot(data=df, y=\"LoanAmount\", ax=axs1[1, 0], color='orange').set(title = \"Violin Plot of Loan Amount\");\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:02.305871Z\",\"iopub.execute_input\":\"2025-06-09T07:21:02.306200Z\",\"iopub.status.idle\":\"2025-06-09T07:21:02.312035Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:02.306174Z\",\"shell.execute_reply\":\"2025-06-09T07:21:02.311098Z\"}}\ndf_corr = df[['LoanAmount','ApplicantIncome']]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:02.313832Z\",\"iopub.execute_input\":\"2025-06-09T07:21:02.314181Z\",\"iopub.status.idle\":\"2025-06-09T07:21:02.599022Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:02.314151Z\",\"shell.execute_reply\":\"2025-06-09T07:21:02.597896Z\"}}\n##Heat Map- Positive Correlation between Loan Amount and Applicant Income\nplt.figure(figsize=(10,7))\nsns.heatmap(df_corr.corr(), annot=True, cmap='inferno');\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:02.600169Z\",\"iopub.execute_input\":\"2025-06-09T07:21:02.600497Z\",\"iopub.status.idle\":\"2025-06-09T07:21:02.803787Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:02.600463Z\",\"shell.execute_reply\":\"2025-06-09T07:21:02.802568Z\"}}\npd.crosstab(df.Gender,df.Married).plot(kind=\"bar\", stacked=True, figsize=(5,5), color=['#f64f59','#12c2e9'])\nplt.title('Gender vs Married')\nplt.xlabel('Gender')\nplt.ylabel('Frequency')\nplt.xticks(rotation=0)\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:02.804893Z\",\"iopub.execute_input\":\"2025-06-09T07:21:02.805273Z\",\"iopub.status.idle\":\"2025-06-09T07:21:03.017706Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:02.805243Z\",\"shell.execute_reply\":\"2025-06-09T07:21:03.016642Z\"}}\npd.crosstab(df.Self_Employed,df.Credit_History).plot(kind=\"bar\", stacked=True, figsize=(5,5), color=['#544a7d','#ffd452'])\nplt.title('Self Employed vs Credit History')\nplt.xlabel('Self Employed')\nplt.ylabel('Frequency')\nplt.legend([\"Bad Credit\", \"Good Credit\"])\nplt.xticks(rotation=0)\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:03.018610Z\",\"iopub.execute_input\":\"2025-06-09T07:21:03.018975Z\",\"iopub.status.idle\":\"2025-06-09T07:21:03.280638Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:03.018951Z\",\"shell.execute_reply\":\"2025-06-09T07:21:03.279700Z\"}}\nsns.boxplot(x=\"Loan_Status\", y=\"ApplicantIncome\", data=df, palette=\"mako\").set(title = \"Loan Status vs. Applicant Income\");\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:03.281996Z\",\"iopub.execute_input\":\"2025-06-09T07:21:03.282314Z\",\"iopub.status.idle\":\"2025-06-09T07:21:03.521783Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:03.282289Z\",\"shell.execute_reply\":\"2025-06-09T07:21:03.520345Z\"}}\nsns.boxplot(x=\"CoapplicantIncome\", y=\"Loan_Status\", data=df, palette=\"rocket\").set(title = \"CoApplicant Income vs. Loan Status\");\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:03.522949Z\",\"iopub.execute_input\":\"2025-06-09T07:21:03.523250Z\",\"iopub.status.idle\":\"2025-06-09T07:21:03.744960Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:03.523225Z\",\"shell.execute_reply\":\"2025-06-09T07:21:03.744003Z\"}}\nsns.boxplot(x=\"Loan_Status\", y=\"LoanAmount\", data=df, palette=\"YlOrBr\").set(title = \"Loan Status vs. Loan Amount\");\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:03.745719Z\",\"iopub.execute_input\":\"2025-06-09T07:21:03.746012Z\",\"iopub.status.idle\":\"2025-06-09T07:21:04.033541Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:03.745992Z\",\"shell.execute_reply\":\"2025-06-09T07:21:04.032549Z\"}}\n\ndf.plot(x='ApplicantIncome', y='CoapplicantIncome', style='o')  \nplt.title('Applicant Income - Co Applicant Income')  \nplt.xlabel('ApplicantIncome')\nplt.ylabel('CoapplicantIncome')  \nplt.show()\nprint('Pearson correlation:', df['ApplicantIncome'].corr(df['CoapplicantIncome']))\nprint('T Test and P value: \\n', stats.ttest_ind(df['ApplicantIncome'], df['CoapplicantIncome']))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:04.034287Z\",\"iopub.execute_input\":\"2025-06-09T07:21:04.034507Z\",\"iopub.status.idle\":\"2025-06-09T07:21:04.043735Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:04.034489Z\",\"shell.execute_reply\":\"2025-06-09T07:21:04.042744Z\"}}\ndf.isnull().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:04.044643Z\",\"iopub.execute_input\":\"2025-06-09T07:21:04.045017Z\",\"iopub.status.idle\":\"2025-06-09T07:21:04.988862Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:04.044991Z\",\"shell.execute_reply\":\"2025-06-09T07:21:04.987753Z\"}}\nplt.figure(figsize = (24, 5))\naxz = plt.subplot(1,2,2)\nplt.xlabel(\"Data Set Variables\")\nplt.ylabel(\"Percentage of Null Values\")\nplt.title(\"Count of Null Values per Data Set Variable\")\nmso.bar(df, ax = axz, fontsize = 12);\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:04.989938Z\",\"iopub.execute_input\":\"2025-06-09T07:21:04.990179Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.003673Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:04.990160Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.002416Z\"}}\n##Replacing categorical null values with a estimated value\ndf['Gender'].fillna(df['Gender'].mode()[0],inplace=True)\ndf['Married'].fillna(df['Married'].mode()[0],inplace=True)\ndf['Dependents'].fillna(df['Dependents'].mode()[0],inplace=True)\ndf['Self_Employed'].fillna(df['Self_Employed'].mode()[0],inplace=True)\ndf['Credit_History'].fillna(df['Credit_History'].mode()[0],inplace=True)\ndf['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0],inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.004638Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.005032Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.024360Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.005003Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.023148Z\"}}\n##Replacing null loan amounts with the mean\ndf['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.025711Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.026135Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.047974Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.026109Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.046993Z\"}}\ndf.isnull().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.049355Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.049703Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.074474Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.049667Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.073425Z\"}}\ndf = pd.get_dummies(df)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.075663Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.076003Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.092427Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.075971Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.091209Z\"}}\ndf = df.drop(['Gender_Female', 'Married_No', 'Education_Not Graduate', 'Self_Employed_No', 'Loan_Status_N'], axis = 1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.093547Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.093885Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.117071Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.093860Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.115874Z\"}}\n# Rename columns name\nnew = {'Gender_Male': 'Gender', 'Married_Yes': 'Married', \n       'Education_Graduate': 'Education', 'Self_Employed_Yes': 'Self_Employed',\n       'Loan_Status_Y': 'Loan_Status'}\n       \ndf.rename(columns=new, inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.118249Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.119129Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.146910Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.119091Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.145892Z\"}}\n# Step 1: Select only numeric columns\nnumeric_cols = df.select_dtypes(include=['number']).columns\n\n# Step 2: Calculate IQR only for numeric columns\nQ1 = df[numeric_cols].quantile(0.25)\nQ3 = df[numeric_cols].quantile(0.75)\nIQR = Q3 - Q1\n\n# Step 3: Filter out outliers based on IQR\ndf = df[~((df[numeric_cols] < (Q1 - 1.5 * IQR)) | \n          (df[numeric_cols] > (Q3 + 1.5 * IQR))).any(axis=1)]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.148097Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.148373Z\",\"iopub.status.idle\":\"2025-06-09T07:21:05.170616Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.148352Z\",\"shell.execute_reply\":\"2025-06-09T07:21:05.169507Z\"}}\n#Square Root Transformation\n\ndf.ApplicantIncome = np.sqrt(df.ApplicantIncome)\ndf.CoapplicantIncome = np.sqrt(df.CoapplicantIncome)\ndf.LoanAmount = np.sqrt(df.LoanAmount)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:05.171761Z\",\"iopub.execute_input\":\"2025-06-09T07:21:05.172080Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.411392Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:05.172057Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.410181Z\"}}\nsns.set(style=\"darkgrid\")\nfig, axs = plt.subplots(2, 2, figsize=(10, 12))\n\nsns.histplot(data=df, x=\"ApplicantIncome\", kde=True, ax=axs[0, 0], color='green').set(title = \"New Distribution of Applicant Income\");\nsns.histplot(data=df, x=\"CoapplicantIncome\", kde=True, ax=axs[0, 1], color='skyblue').set(title = \"New Distribution of CoApplicant Income\");\nsns.histplot(data=df, x=\"LoanAmount\", kde=True, ax=axs[1, 0], color='orange').set(title = \"New Distribution of Loan Amount\");\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.412825Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.413088Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.419173Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.413067Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.418109Z\"}}\nX = df.drop([\"Loan_Status\"], axis=1)\ny = df[\"Loan_Status\"]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.420408Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.420857Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.442421Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.420821Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.441146Z\"}}\nX = MinMaxScaler().fit_transform(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.443676Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.443985Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.460352Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.443962Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.459128Z\"}}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# %% [markdown]\n# Logistic Regression\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.461758Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.462204Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.499135Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.462174Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.497919Z\"}}\nLRclassifier = LogisticRegression(solver='saga', max_iter=500, random_state=42)\nLRclassifier.fit(X_train, y_train)\n\ny_pred = LRclassifier.predict(X_test)\n\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n\nfrom sklearn.metrics import accuracy_score\nLRAcc = accuracy_score(y_pred,y_test)\nprint('LR accuracy: {:.2f}%'.format(LRAcc*100))\n\n# %% [markdown]\n# K-Nearest Neighbor (KNN)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.500257Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.500534Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.508051Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.500511Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.506853Z\"}}\nX = df.drop([\"Loan_Status\"], axis=1)\ny = df[\"Loan_Status\"]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.509105Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.509404Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.532888Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.509378Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.532012Z\"}}\nX = MinMaxScaler().fit_transform(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.540225Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.540520Z\",\"iopub.status.idle\":\"2025-06-09T07:21:06.552736Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.540500Z\",\"shell.execute_reply\":\"2025-06-09T07:21:06.551535Z\"}}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:06.554159Z\",\"iopub.execute_input\":\"2025-06-09T07:21:06.554488Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.010401Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:06.554457Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.009325Z\"}}\nscoreListknn = []\nfor i in range(1,21):\n    KNclassifier = KNeighborsClassifier(n_neighbors = i)\n    KNclassifier.fit(X_train, y_train)\n    scoreListknn.append(KNclassifier.score(X_test, y_test))\n    \nplt.plot(range(1,21), scoreListknn)\nplt.xticks(np.arange(1,21,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\nKNAcc = max(scoreListknn)\nprint(\"KNN best accuracy: {:.2f}%\".format(KNAcc*100))\n\n# %% [markdown]\n# Support Vector Machine (SVM)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.011569Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.011941Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.018305Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.011909Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.017122Z\"}}\nX = df.drop([\"Loan_Status\"], axis=1)\ny = df[\"Loan_Status\"]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.019215Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.019536Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.041342Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.019515Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.040274Z\"}}\nX = MinMaxScaler().fit_transform(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.042580Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.043272Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.060153Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.043245Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.058850Z\"}}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.061136Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.061460Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.092253Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.061437Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.091154Z\"}}\nSVCclassifier = SVC(kernel='rbf', max_iter=500)\nSVCclassifier.fit(X_train, y_train)\n\ny_pred = SVCclassifier.predict(X_test)\n\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n\nfrom sklearn.metrics import accuracy_score\nSVCAcc = accuracy_score(y_pred,y_test)\nprint('SVC accuracy: {:.2f}%'.format(SVCAcc*100))\n\n# %% [markdown]\n# Naive Bayes\n\n# %% [markdown]\n# Categorical NB\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.093286Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.093611Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.099338Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.093582Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.098360Z\"}}\nX = df.drop([\"Loan_Status\"], axis=1)\ny = df[\"Loan_Status\"]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.100378Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.100721Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.126657Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.100690Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.125899Z\"}}\nX = MinMaxScaler().fit_transform(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.127740Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.128036Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.148525Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.128015Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.147372Z\"}}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.149909Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.150309Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.185546Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.150273Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.184403Z\"}}\nNBclassifier1 = CategoricalNB()\nNBclassifier1.fit(X_train, y_train)\n\ny_pred = NBclassifier1.predict(X_test)\n\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n\nfrom sklearn.metrics import accuracy_score\nNBAcc1 = accuracy_score(y_pred,y_test)\nprint('Categorical Naive Bayes accuracy: {:.2f}%'.format(NBAcc1*100))\n\n# %% [markdown]\n# Gaussian NB\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.186519Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.186857Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.192898Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.186748Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.191939Z\"}}\nX = df.drop([\"Loan_Status\"], axis=1)\ny = df[\"Loan_Status\"]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.194121Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.194783Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.214641Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.194759Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.213544Z\"}}\nX = MinMaxScaler().fit_transform(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.215981Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.216865Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.232683Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.216825Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.231688Z\"}}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.233940Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.234289Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.267120Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.234260Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.265889Z\"}}\nNBclassifier2 = GaussianNB()\nNBclassifier2.fit(X_train, y_train)\n\ny_pred = NBclassifier2.predict(X_test)\n\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n\nfrom sklearn.metrics import accuracy_score\nNBAcc2 = accuracy_score(y_pred,y_test)\nprint('Gaussian Naive Bayes accuracy: {:.2f}%'.format(NBAcc2*100))\n\n# %% [markdown]\n# Decision Tree\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.268434Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.268730Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.276000Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.268706Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.275051Z\"}}\nX = df.drop([\"Loan_Status\"], axis=1)\ny = df[\"Loan_Status\"]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.277212Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.278376Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.298916Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.278351Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.297891Z\"}}\nX = MinMaxScaler().fit_transform(X)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.300028Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.300323Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.318858Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.300301Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.317652Z\"}}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.319824Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.320135Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.681388Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.320112Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.680313Z\"}}\nscoreListDT = []\nfor i in range(2,21):\n    DTclassifier = DecisionTreeClassifier(max_leaf_nodes=i)\n    DTclassifier.fit(X_train, y_train)\n    scoreListDT.append(DTclassifier.score(X_test, y_test))\n    \nplt.plot(range(2,21), scoreListDT)\nplt.xticks(np.arange(2,21,1))\nplt.xlabel(\"Leaf\")\nplt.ylabel(\"Score\")\nplt.show()\nDTAcc = max(scoreListDT)\nprint(\"Decision Tree Accuracy: {:.2f}%\".format(DTAcc*100))\n\n# %% [markdown]\n# Compare Models\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-09T07:21:07.682255Z\",\"iopub.execute_input\":\"2025-06-09T07:21:07.682570Z\",\"iopub.status.idle\":\"2025-06-09T07:21:07.694494Z\",\"shell.execute_reply.started\":\"2025-06-09T07:21:07.682548Z\",\"shell.execute_reply\":\"2025-06-09T07:21:07.693666Z\"}}\ncompare = pd.DataFrame({'Model': ['Logistic Regression', 'K Neighbors', \n                                  'SVM', 'Categorical NB', \n                                  'Gaussian NB', 'Decision Tree'], \n                        'Accuracy': [LRAcc*100, KNAcc*100, SVCAcc*100, \n                                     NBAcc1*100, NBAcc2*100, DTAcc*100]})\ncompare.sort_values(by='Accuracy', ascending=False)","metadata":{"_uuid":"a5f1e23a-6823-4f54-8ad1-2a1b960ee566","_cell_guid":"b3709135-b1a9-482f-8f34-a332c27c7d92","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}